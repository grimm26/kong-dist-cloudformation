{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Kong with single node Cassandra cluster CloudFormation template. version v1.0",
  "Parameters": {
    "SSHLocation": {
      "Description": "The IP address range that can be used to SSH to the Kong and Cassandra EC2 instances",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0\/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x\/x."
    },
    "KongProxyAccess": {
      "Description": "The IP address range that can be used to access the Kong proxy port 8000",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0\/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x\/x."
    },
    "KongAdminAccess": {
      "Description": "The IP address range that can be used to access the Kong Admin port 8001",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0\/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x\/x."
    },
    "KongKeyName": {
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instances for Kong",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Default": ""
    },
    "KongInstanceType": {
      "Description": "Kong EC2 instance type",
      "Type": "String",
      "Default": "c3.8xlarge",
      "AllowedValues": [
        "t2.small",
        "t2.micro",
        "t2.medium",
        "t2.large",
        "m3.medium",
        "m3.large",
        "m3.xlarge",
        "m3.2xlarge",
        "m4.large",
        "m4.xlarge",
        "m4.2xlarge",
        "m4.4xlarge",
        "m4.10xlarge",
        "c3.large",
        "c3.xlarge",
        "c3.2xlarge",
        "c3.4xlarge",
        "c3.8xlarge",
        "c4.large",
        "c4.xlarge",
        "c4.xlarge",
        "c4.2xlarge",
        "c4.4xlarge",
        "c4.8xlarge",
        "r3.large",
        "r3.xlarge",
        "r3.2xlarge",
        "r3.4xlarge",
        "r3.8xlarge"
      ],
      "ConstraintDescription": "must be a valid EC2 instance type."
    },
    "KongVersion": {
      "Description": "Kong version, leave empty to install latest version",
      "Type": "String",
      "Default": "0.5.0",
      "AllowedValues": [
        "0.5.0"
      ]
    }
  },
  "Mappings": {
    "RegionKongAmiMap": {
      "us-east-1": {
        "HVM": "ami-1ecae776"
      },
      "us-west-1": {
        "HVM": "ami-d114f295"
      },
      "us-west-2": {
        "HVM": "ami-e7527ed7"
      },
      "eu-west-1" : {
        "HVM": "ami-a10897d6"
      },
      "ap-northeast-1" : {
         "HVM": "ami-cbf90ecb"
      },
      "ap-southeast-1" : {
         "HVM": "ami-68d8e93a"
      },
      "ap-southeast-2" : {
         "HVM": "ami-fd9cecc7"
      },
      "sa-east-1" : {
         "HVM" : "ami-b52890a8"
      }
    }
  },
  "Resources": {
    "KongWaitHandle" : {
      "Type" : "AWS::CloudFormation::WaitConditionHandle"
    },
    "KongWaitCondition" : {
      "Type" : "AWS::CloudFormation::WaitCondition",
      "Properties" : {
        "Handle"  : { "Ref" : "KongWaitHandle" },
        "Timeout" : "900",
        "Count"   : 1
      }
    },
    "KongWithCass": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "ImageId": {
          "Fn::FindInMap": [
            "RegionKongAmiMap",
            {
              "Ref": "AWS::Region"
            },
            "HVM"
          ]
        },
        "InstanceType": {
          "Ref": "KongInstanceType"
        },
        "KeyName": {
          "Ref": "KongKeyName"
        },
        "SecurityGroups": [
          {
            "Ref": "KongSecurityGroup"
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!\/bin\/bash\n",
                "yum update -y aws-cfn-bootstrap\n",
                "yum install openssl098e -y\n",
                "echo '* soft nofile 65000' >> \/etc\/security\/limits.conf\n",
                "echo '* hard nofile 65000' >> \/etc\/security\/limits.conf\n",
                "printf '%s\\n%s\\n%s\\n%s\\n%s\\n ' '[datastax] ' 'name = DataStax Repo for Apache Cassandra' 'baseurl = http://rpm.datastax.com/community' 'enabled = 1' 'gpgcheck = 0'  >> datastax.repo\n",
                "mv datastax.repo  /etc/yum.repos.d/\n",
                "yum install dsc22 -y\n",
                "service cassandra start\n",
                "kong_version=",{ "Ref" : "KongVersion" }, "\n",
                "kong_major_version=$(echo $kong_version | sed -E 's/([0-9].[0-9]).*/\\1.x/' )\n",
                "wget https://bintray.com/mashape/kong-rpm-el5-$kong_major_version/rpm -O kong-$kong_major_version.repo\n",
                "mv  kong-$kong_major_version.repo /etc/yum.repos.d/\n",
                "if [ -e \"/etc/yum.repos.d/kong-$kong_major_version.repo\" ]\n",
                "then\n",
                "   echo \"Installing Kong...\" \n",
                "else\n", 
                "   /opt/aws/bin/cfn-signal -e 1 --reason \"Failed to setup kong repo\" '", { "Ref" : "KongWaitHandle" }, "'\n",
                "   echo \"failed to download kong, exiting...\" \n",
                "   exit\n",
                "fi\n", 
                "yum install -y epel-release\n",
                "yum install -y kong\n",
                "sleep `echo $(( RANDOM % ( 60 - 30 + 1 ) + 30 ))`\n",
                "count=4\n",
                "until [ -f \"\/usr\/local\/kong\/kong.pid\" ]\n",
                "do\n",
                "   if [ $count -le 0 ]\n",
                "   then\n",
                "      /opt/aws/bin/cfn-signal -e 1 --reason \"Failed to start Kong\" '", { "Ref" : "KongWaitHandle" }, "'\n",
                "      echo \"failed to start kong, exiting...\" \n",
                "      exit\n",
                "   else\n",
                "      echo \"trying to start kong..\"\n",
                "      su -s \/bin\/sh -c \"\/usr\/local\/bin\/kong start\" ec2-user\n",
                "      count=\"$(($count-1))\"\n",
                "      sleep `echo $(( RANDOM % ( 60 - 30 + 1 ) + 30 ))`\n",
                "   fi\n", 
                "done\n",
                "/opt/aws/bin/cfn-signal -e 0 --reason \"Kong setup completed\" '", { "Ref" : "KongWaitHandle" }, "'\n"   
              ]
            ]
          }
        }
      }
    },
    "KongSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enable SSH access and HTTP access on the inbound port",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "8000",
            "ToPort": "8000",
            "CidrIp": {
              "Ref": "KongProxyAccess"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "8001",
            "ToPort": "8001",
            "CidrIp": {
              "Ref": "KongAdminAccess"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": {
              "Ref": "SSHLocation"
            }
          }
        ]
      }
    }
  },
  "Outputs": {
    "ProxyURL": {
      "Description": "Kong Proxy URL",
      "Value": {
        "Fn::Join": [
          "",
          [
            "http:\/\/",
            {
              "Fn::GetAtt": [
                "KongWithCass",
                "PublicDnsName"
              ]
            },
            ":8000"
          ]
        ]
      }
    },
    "AdminURL": {
      "Description": "Kong Admin URL",
      "Value": {
        "Fn::Join": [
          "",
          [
            "http:\/\/",
            {
              "Fn::GetAtt": [
                "KongWithCass",
                "PublicDnsName"
              ]
            },
            ":8001"
          ]
        ]
      }
    }
  }
}