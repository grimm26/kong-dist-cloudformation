{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Kong CloudFormation template.Template creates load balanced Kong instances with Cassandra cluster",
  "Parameters": {
    "KeystoreBucket": {
      "Description": "Bucket name",
      "Type": "String",
      "Default": ""
    },
    "CassandraSSLVerify": {
      "Description": "Verify certificate",
      "Type": "String",
      "AllowedValues": [
        "true",
        "false"
      ]
    },
    "KeystoreAlias": {
      "Description": "Keystore alias",
      "Type": "String",
      "Default": ""
    },
    "KeyStorePassword": {
      "Description": "Keystore password",
      "Type": "String",
      "Default": ""
    },
    "CassandraKeyName": {
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instances for Cassandra",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Default": ""
    },
    "CassandraFleetSize": {
      "Description": "Number of nodes in cassandra cluster",
      "Type": "Number",
      "Default": "1",
      "MinValue": "1"
    },
    "CassandraAvailabilityZone": {
      "Description": "AZ for the Cassandra instance, please choose non constrained zone only",
      "Type": "AWS::EC2::AvailabilityZone::Name"
    },
    "SSHLocation": {
      "Description": "The IP address range that can be used to SSH to the Kong and Cassandra EC2 instances",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0\/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x\/x."
    },
    "CassandraOpsCenterAccess": {
      "Description": "The IP address range that can access OpsCenter for Cassandra cluster management",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0\/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x\/x."
    },
    "KongAvailabilityZones": {
      "Description": "AZ for the Kong instances, please choose non constrained zones only",
      "Type": "List<AWS::EC2::AvailabilityZone::Name>"
    },
    "KongProxyAccess": {
      "Description": "The IP address range that can be used to access the Kong proxy port 8000",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0\/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x\/x."
    },
    "KongAdminAccess": {
      "Description": "The IP address range that can be used to access the Kong Admin port 8001",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0\/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x\/x."
    },
    "KongKeyName": {
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instances for Kong",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Default": ""
    },
    "KongFleetMaxSize": {
      "Description": "Max Number of Kong instances",
      "Type": "Number",
      "Default": "2",
      "MinValue": "1"
    },
    "KongFleetDesiredSize": {
      "Description": "Desired Number of Kong instances",
      "Type": "Number",
      "Default": "2",
      "MinValue": "1"
    },
    "KongInstanceType": {
      "Description": "Kong EC2 instance type. Note: T2 instance is not supported on the EC2-Classic platform",
      "Type": "String",
      "Default": "c3.8xlarge",
      "AllowedValues": [
        "t2.small",
        "t2.micro",
        "t2.medium",
        "t2.large",
        "m3.medium",
        "m3.large",
        "m3.xlarge",
        "m3.2xlarge",
        "m4.large",
        "m4.xlarge",
        "m4.2xlarge",
        "m4.4xlarge",
        "m4.10xlarge",
        "c3.large",
        "c3.xlarge",
        "c3.2xlarge",
        "c3.4xlarge",
        "c3.8xlarge",
        "c4.large",
        "c4.xlarge",
        "c4.xlarge",
        "c4.2xlarge",
        "c4.4xlarge",
        "c4.8xlarge",
        "r3.large",
        "r3.xlarge",
        "r3.2xlarge",
        "r3.4xlarge",
        "r3.8xlarge"
      ],
      "ConstraintDescription": "must be a valid EC2 instance type."
    },
    "CassandraInstanceType": {
      "Description": "Cassandra EC2 instance type",
      "Type": "String",
      "Default": "c3.2xlarge",
      "AllowedValues": [
        "m3.medium",
        "m3.large",
        "m3.xlarge",
        "m3.2xlarge",
        "c3.large",
        "c3.xlarge",
        "c3.2xlarge",
        "c3.4xlarge",
        "c3.8xlarge",
        "cc2.8xlarge",
        "cc1.4xlarge",
        "g2.2xlarge",
        "g2.8xlarge",
        "cg1.4xlarge",
        "r3.large",
        "r3.xlarge",
        "r3.2xlarge",
        "r3.4xlarge",
        "r3.8xlarge",
        "d2.xlarge",
        "d2.2xlarge",
        "d2.4xlarge",
        "d2.8xlarge",
        "i2.xlarge",
        "i2.2xlarge"
      ],
      "ConstraintDescription": "must be a valid EC2 instance type."
    },
    "CassandraClusterName": {
      "Default": "Cassandra Cluster",
      "Description": "Cassandra cluster name",
      "Type": "String"
    },
    "CassandraClusterVersion": {
      "Description": "Cassandra cluster version",
      "Type": "String",
      "Default": "Community",
      "AllowedValues": [
        "Community",
        "Enterprise"
      ]
    },
    "CassandraVersion": {
      "Description": "Cassandra version",
      "Type": "String",
      "Default": "2.2.0",
      "AllowedValues": [
        "2.1.8",
        "2.2.0"
      ]
    },
    "KongVersion": {
      "Description": "Kong version, leave empty to install latest version",
      "Type": "String"
    }
  },
  "Mappings": {
    "RegionKongAmiMap": {
      "us-east-1": {
        "HVM": "ami-1ecae776"
      },
      "us-west-1": {
        "HVM": "ami-d114f295"
      },
      "us-west-2": {
        "HVM": "ami-e7527ed7"
      },
      "eu-west-1" : {
        "HVM": "ami-a10897d6"
      },
      "ap-northeast-1" : {
         "HVM": "ami-cbf90ecb"
      },
      "ap-southeast-1" : {
         "HVM": "ami-68d8e93a"
      },
      "ap-southeast-2" : {
         "HVM": "ami-fd9cecc7"
      },
      "sa-east-1" : {
         "HVM" : "ami-b52890a8"
      }
    },
    "RegionCassAmiMap": {
      "us-east-1": {
        "HVM": "ami-ada2b6c4"
      },
      "us-west-1": {
        "HVM": "ami-3cf7c979"
      },
      "us-west-2": {
        "HVM": "ami-1cff962c"
      },
      "eu-west-1" : {
        "HVM": "ami-7f33cd08"
      },
      "ap-northeast-1" : {
        "HVM": "ami-714a3770"
      },
      "ap-southeast-1" : {
        "HVM": "ami-b47828e6"
      },
      "ap-southeast-2" : {
        "HVM": "ami-55d54d6f"
      },
      "sa-east-1" : {
        "HVM": "ami-1dda7800"
      }
    }
  },
  "Resources": {
    "InstanceRole":{
	   "Type":"AWS::IAM::Role",
	   "Properties":{
	      "AssumeRolePolicyDocument":{
	         "Statement":[
	            {
	               "Effect":"Allow",
	               "Principal":{
	                  "Service":[
	                     "ec2.amazonaws.com"
	                  ]
	               },
	               "Action":[
	                  "sts:AssumeRole"
	               ]
	            }
	         ]
	      },
	      "Path":"/"
	   }
	},
	"RolePolicies":{
	   "Type":"AWS::IAM::Policy",
	   "Properties":{
	      "PolicyName":"S3Download",
	      "PolicyDocument":{
	         "Statement":[
	            {
	               "Action":[
	                  "s3:GetObject"
	               ],
	               "Effect":"Allow",
	               "Resource":
                   {
                     "Fn::Join": [ "", [ "arn:aws:s3:::", { "Ref":"KeystoreBucket" }, "/cassandra_keystore" ]]
                   }
	            }
	         ]
	      },
	      "Roles":[
	         {
	            "Ref":"InstanceRole"
	         }
	      ]
	   }
	},
	"InstanceProfile":{
	   "Type":"AWS::IAM::InstanceProfile",
	   "Properties":{
	      "Path":"/",
	      "Roles":[
	         {
	            "Ref":"InstanceRole"
	         }
	      ]
	   }
	},
    "KongGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "DependsOn" : "CassandraWaitCondition",
      "Properties": {
        "AvailabilityZones": {
          "Ref": "KongAvailabilityZones"
        },
        "LaunchConfigurationName": {
          "Ref": "KongLaunchConfig"
        },
        "MinSize": "1",
        "MaxSize": {
          "Ref": "KongFleetMaxSize"
        },
        "DesiredCapacity": {
          "Ref": "KongFleetDesiredSize"
        },
        "LoadBalancerNames": [
          {
            "Ref": "KongLoadBalancer"
          }
        ],
        "HealthCheckGracePeriod": "300",
        "Tags" : [
          { "Key" : "Name", "Value" : { "Ref" : "AWS::StackId" }, "PropagateAtLaunch" : "true" }
        ]
      },
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "MinInstancesInService": "1",
          "MaxBatchSize": "1",
          "PauseTime": "PT15M",
          "WaitOnResourceSignals": "true"
        }
      }
    },
    "KongWaitHandle" : {
      "Type" : "AWS::CloudFormation::WaitConditionHandle"
    },
    "KongWaitCondition" : {
      "Type" : "AWS::CloudFormation::WaitCondition",
      "DependsOn" : "KongGroup",
      "Properties" : {
        "Handle"  : { "Ref" : "KongWaitHandle" },
        "Timeout" : "900",
        "Count"   : { "Ref" : "KongFleetDesiredSize" }
      }
    },
    "KongLaunchConfig": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Metadata":
      {
	    "AWS::CloudFormation::Authentication":
		{
		  "S3AccessCreds":
		  {
		    "type":"S3",
	        "roleName":
		    {
		      "Ref":"InstanceRole"
		    }
		  }
		},
		"AWS::CloudFormation::Init":
		{
		  "config":
		  {
		    "files":
		    {
		      "/var/cassandra/keystore":
		      {
		        "source":
		        {
		          "Fn::Join": [ "", [ "https://s3.amazonaws.com/", { "Ref":"KeystoreBucket" }, "/cassandra_keystore" ]]
		        }, 
		        "mode":"000400",
		        "owner":"cassandra",
		        "group":"cassandra",
		        "authentication":"S3AccessCreds"
		      }
		    } 
		  } 
	    }
      },
      "Properties": {
        "IamInstanceProfile":
        {
          "Ref":"InstanceProfile"
        },
        "ImageId": {
          "Fn::FindInMap": [
            "RegionKongAmiMap",
            {
              "Ref": "AWS::Region"
            },
            "HVM"
          ]
        },
        "InstanceType": {
          "Ref": "KongInstanceType"
        },
        "KeyName": {
          "Ref": "KongKeyName"
        },
        "SecurityGroups": [
          {
            "Ref": "KongSecurityGroup"
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!\/bin\/bash\n",
                "yum update -y aws-cfn-bootstrap\n",
                "yum install openssl098e -y\n",
                "echo '* soft nofile 65000' >> \/etc\/security\/limits.conf\n",
                "echo '* hard nofile 65000' >> \/etc\/security\/limits.conf\n",
                "kong_version=",{ "Ref" : "KongVersion" }, "\n",
                "if [ -z $kong_version ]\n",
                "then\n",
                "   wget -O kong.rpm downloadkong.org/el5.noarch.rpm\n",
                "else\n",
                "   wget -O kong.rpm downloadkong.org/el5.noarch.rpm?version=$kong_version\n",
                "fi\n",
                "if [ -e \".\/kong.rpm\" ]\n",
                "then\n",
                "   echo \"Installing Kong...\" \n",
                "else\n", 
                "   /opt/aws/bin/cfn-signal -e 1 --reason \"Failed to download Kong\" '", { "Ref" : "KongWaitHandle" }, "'\n",
                "   echo \"failed to download kong, exiting...\" \n",
                "   exit\n",
                "fi\n", 
                "yum install -y epel-release\n",
                "yum install -y kong.rpm --nogpgcheck\n",
                "cassandra_hosts=", { "Fn::GetAtt": [ "CassandraWaitCondition", "Data" ] }, "\n",
                "cassandra_hosts=$(echo $cassandra_hosts | awk -F\"{\" '{print $2}')\n",
                "cassandra_hosts=$(echo $cassandra_hosts | awk -F\"}\" '{print $1}')\n",
                "IFS=', ' read -a host_array <<< \"$cassandra_hosts\"\n",   
                "for i in \"${host_array[@]}\"\n",
                "do\n",
                "   hostName=$(echo $i | awk -F\":\" '{print $1}')\n",
                "   echo -e \"        - $hostName\"  >> hosts\n",
                "done;\n",
                "sed -i $'/.*\"localhost:9042\"\/{r hosts\\n d}' \/etc\/kong\/kong.yml\n",
                "sleep `echo $(( RANDOM % ( 60 - 30 + 1 ) + 30 ))`\n",
                "pip install awscli\n",
                "aws s3 cp s3://", { "Ref": "KeystoreBucket" }, "/cassandra_keystore /home/ec2-user/.keystore\n",
                "keytool -export -alias ", { "Ref": "KeystoreAlias" }," -file /home/ec2-user/cassandra.cer -keystore /home/ec2-user/.keystore -storepass ", { "Ref": "KeyStorePassword" },"\n",
                "keytool -import -v -trustcacerts -alias ", { "Ref": "KeystoreAlias" }," -file cassandra.cer -keystore /home/ec2-user/.truststore -noprompt -storepass ", { "Ref": "KeyStorePassword" },"\n",
                "keytool -importkeystore -srckeystore /home/ec2-user/.keystore -destkeystore /home/ec2-user/cassandra.p12 -deststoretype PKCS12 -srcstorepass ", { "Ref": "KeyStorePassword" },  " -deststorepass", { "Ref": "KeyStorePassword" }, "\n",
                "openssl pkcs12 -in /home/ec2-user/cassandra.p12 -out /home/ec2-user/cassandra.pem -passin pass:", { "Ref": "KeyStorePassword" }," -nodes\n",
                "perl -0777  -i -pe 's/# ssl: false\\n      # ssl_verify: false\\n      # ssl_certificate: \"\\/path\\/to\\/cluster-ca-certificate.pem\"/ssl: true\\n      ssl_verify: ",{ "Ref": "CassandraSSLVerify" }, "\\n      ssl_certificate: \"\\/home\\/ec2-user\\/cassandra.pem\"/igs' /etc/kong/kong.yml\n",
                "count=4\n",
                "until [ -f \"\/usr\/local\/kong\/kong.pid\" ]\n",
                "do\n",
                "   if [ $count -le 0 ]\n",
                "   then\n",
                "      /opt/aws/bin/cfn-signal -e 1 --reason \"Failed to start Kong\" '", { "Ref" : "KongWaitHandle" }, "'\n",
                "      echo \"failed to start kong, exiting...\" \n",
                "      exit\n",
                "   else\n",
                "      echo \"trying to start kong..\"\n",
                "      su -s \/bin\/sh -c \"\/usr\/local\/bin\/kong start\" ec2-user\n",
                "      count=\"$(($count-1))\"\n",
                "      sleep `echo $(( RANDOM % ( 60 - 30 + 1 ) + 30 ))`\n",
                "   fi\n", 
                "done\n",
                "/opt/aws/bin/cfn-signal -e 0 --reason \"Kong setup completed\" '", { "Ref" : "KongWaitHandle" }, "'\n"   
              ]
            ]
          }
        }
      }
    },
    "KongLoadBalancer": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "AvailabilityZones": {
          "Ref": "KongAvailabilityZones"
        },
        "Listeners": [
          {
            "LoadBalancerPort": "8000",
            "InstancePort": "8000",
            "Protocol": "HTTP"
          },
          {
            "LoadBalancerPort": "8001",
            "InstancePort": "8001",
            "Protocol": "HTTP"
          }
        ],
        "HealthCheck": {
          "Target": "TCP:8000",
          "HealthyThreshold": "3",
          "UnhealthyThreshold": "5",
          "Interval": "30",
          "Timeout": "5"
        }
      }
    },
    "KongSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enable SSH access and HTTP access on the inbound port",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "8000",
            "ToPort": "8000",
            "CidrIp": {
              "Ref": "KongProxyAccess"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "8001",
            "ToPort": "8001",
            "CidrIp": {
              "Ref": "KongAdminAccess"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": {
              "Ref": "SSHLocation"
            }
          }
        ]
      }
    },
    "CassandraWaitHandle" : {
      "Type" : "AWS::CloudFormation::WaitConditionHandle"
    },
    "CassandraWaitCondition" : {
      "Type" : "AWS::CloudFormation::WaitCondition",
      "DependsOn" : "CaasandraGroup",
      "Properties" : {
        "Handle"  : { "Ref" : "CassandraWaitHandle" },
        "Timeout" : "900",
        "Count"   : { "Ref" : "CassandraFleetSize" }
      }
    },
    "CaasandraGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "LaunchConfigurationName": {
          "Ref": "CassandraLaunchConfig"
        },
        "AvailabilityZones": [
          {
            "Ref": "CassandraAvailabilityZone"
          }
        ], 
        "MinSize": {
          "Ref": "CassandraFleetSize"
        },
        "MaxSize": {
          "Ref": "CassandraFleetSize"
        },
        "DesiredCapacity": {
          "Ref": "CassandraFleetSize"
        },
        "Tags" : [
          { "Key" : "Name", "Value" : { "Ref" : "AWS::StackId" }, "PropagateAtLaunch" : "true" }
        ]
      },
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "MinInstancesInService": "1",
          "MaxBatchSize": "1",
          "PauseTime": "PT15M",
          "WaitOnResourceSignals": "true"
        }
      }
    },
    "CassandraSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Cassandra SecurityGroup",
        "SecurityGroupIngress": [
          {"IpProtocol": "tcp", "FromPort": "22", "ToPort": "22", "CidrIp": {"Ref": "SSHLocation"}},
          {"IpProtocol": "tcp", "FromPort": "8888", "ToPort": "8888", "CidrIp": {"Ref": "CassandraOpsCenterAccess"}}
        ]
      }
    },
    "Ingress1024To65355": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupName": {"Ref": "CassandraSecurityGroup"}, "IpProtocol": "tcp", "FromPort": "1024", "ToPort": "65355", "SourceSecurityGroupId": {
          "Fn::GetAtt" : [ "CassandraSecurityGroup", "GroupId" ]
        }
      }
    },
    "Ingress7000": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupName": {"Ref": "CassandraSecurityGroup"}, "IpProtocol": "tcp", "FromPort": "7000", "ToPort": "7000", "SourceSecurityGroupId": {
          "Fn::GetAtt" : [ "CassandraSecurityGroup", "GroupId" ]
        }
      }
    },
    "Ingress7001": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupName": {"Ref": "CassandraSecurityGroup"}, "IpProtocol": "tcp", "FromPort": "7001", "ToPort": "7001", "SourceSecurityGroupId": {
          "Fn::GetAtt" : [ "CassandraSecurityGroup", "GroupId" ]
        }
      }
    },
    "Ingress7199": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupName": {"Ref": "CassandraSecurityGroup"}, "IpProtocol": "tcp", "FromPort": "7199", "ToPort": "7199", "SourceSecurityGroupId": {
          "Fn::GetAtt" : [ "CassandraSecurityGroup", "GroupId" ]
        }
      }
    },
    "Ingress61620": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupName": {"Ref": "CassandraSecurityGroup"}, "IpProtocol": "tcp", "FromPort": "61620", "ToPort": "61620", "SourceSecurityGroupId": {
          "Fn::GetAtt" : [ "CassandraSecurityGroup", "GroupId" ]
        }
      }
    },
    "Ingress61621": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupName": {"Ref": "CassandraSecurityGroup"}, "IpProtocol": "tcp", "FromPort": "61621", "ToPort": "61621", "SourceSecurityGroupId": {
          "Fn::GetAtt" : [ "CassandraSecurityGroup", "GroupId" ]
        }
      }
    },
    "Ingress9042": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupName": {"Ref": "CassandraSecurityGroup"}, "IpProtocol": "tcp", "FromPort": "9042", "ToPort": "9042", "SourceSecurityGroupId": {
          "Fn::GetAtt" : [ "KongSecurityGroup", "GroupId" ]
        }
      }
    },
    "Ingress9160": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupName": {"Ref": "CassandraSecurityGroup"}, "IpProtocol": "tcp", "FromPort": "9160", "ToPort": "9160", "SourceSecurityGroupId": {
          "Fn::GetAtt" : [ "KongSecurityGroup", "GroupId" ]
        }
      }
    },
    "CassandraLaunchConfig": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Metadata":
      {
		  "AWS::CloudFormation::Authentication":
		  {
		    "S3AccessCreds":
		    {
		      "type":"S3",
		      "roleName":
		      {
		        "Ref":"InstanceRole"
		      }
		    }
		  },
		  "AWS::CloudFormation::Init":
		  {
		    "config":
		    {
		      "files":
		      {
		        "/var/cassandra/keystore":
		        {
		          "source":
		          {
		            "Fn::Join": [ "", [ "https://s3.amazonaws.com/", { "Ref":"KeystoreBucket" }, "/cassandra_keystore" ]]
		          }, 
		          "mode":"000400",
		          "owner":"cassandra",
		          "group":"cassandra",
		          "authentication":"S3AccessCreds"
		        }
		      } 
		    } 
		  }
      },
      "Properties": {
        "IamInstanceProfile":{
               "Ref":"InstanceProfile"
        },
        "ImageId": {
          "Fn::FindInMap": [
            "RegionCassAmiMap",
            {
              "Ref": "AWS::Region"
            },
            "HVM"
          ]
        },
        "InstanceType": {
          "Ref": "CassandraInstanceType"
        },
        "KeyName": {
          "Ref": "CassandraKeyName"
        },
        "SecurityGroups": [
          {
            "Ref": "CassandraSecurityGroup"
          }
        ],  
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [ 
                "#!\/bin\/bash\n",
                "apt-get -y install python-setuptools\n",
                "pip install awscli\n",
                "aws s3 cp s3://", { "Ref": "KeystoreBucket" }, "/cassandra_keystore /home/ubuntu/.keystore\n",
                "keytool -export -alias ", { "Ref": "KeystoreAlias" }," -file /home/ubuntu/cassandra.cer -keystore /home/ubuntu/.keystore -storepass ", { "Ref": "KeyStorePassword" },"\n",
                "keytool -import -v -trustcacerts -alias ", { "Ref": "KeystoreAlias" }," -file /home/ubuntu/cassandra.cer -keystore /home/ubuntu/.truststore -noprompt -storepass ", { "Ref": "KeyStorePassword" },"\n",
                "chown cassandra /home/ubuntu/.keystore\n",
                "chown cassandra /home/ubuntu/.truststore\n",
                "perl -0777  -i -pe 's/client_encryption_options:\\n    enabled: false\\n    keystore: conf\\/\\.keystore\\n    keystore_password: cassandra/client_encryption_options:\\n    enabled: true\\n    keystore: \\/home\\/ubuntu\\/\\.keystore\\n    keystore_password: ", { "Ref": "KeyStorePassword" },"/igs' /etc/cassandra/cassandra.yaml\n",
                "perl -0777  -i -pe 's/server_encryption_options:\\n    internode_encryption: none\\n    keystore: conf\\/\\.keystore\\n    keystore_password: cassandra\\n    truststore: conf\\/\\.truststore\\n    truststore_password: cassandra/server_encryption_options:\\n    internode_encryption: all\\n    keystore: \\/home\\/ubuntu\\/\\.keystore\\n    keystore_password: ", { "Ref": "KeyStorePassword" },"\\n    truststore: \\/home\\/ubuntu\\/\\.truststore\\n    truststore_password: ", { "Ref": "KeyStorePassword" },"/igs' /etc/cassandra/cassandra.yaml\n",
                "perl -0777  -i -pe 's/# protocol: TLS/protocol: SSL/igs' /etc/cassandra/cassandra.yaml\n",
                "easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz\n",
                "publicip=`curl http://169.254.169.254/latest/meta-data/public-ipv4`\n",
                "publichost=`curl http://169.254.169.254/latest/meta-data/public-hostname`\n",
                "cfn-signal -e 0 --data $publicip --id $publichost --reason \"Kong setup completed\" '", { "Ref" : "CassandraWaitHandle" }, "'\n",
                "--clustername ",{ "Ref": "CassandraClusterName" }, " --totalnodes ", { "Ref": "CassandraFleetSize" }," --version ", { "Ref": "CassandraClusterVersion" }," --release ",{"Ref": "CassandraVersion"},
                "\n"   
              ]
            ]
          }
        }
      }
    }
  },
  "Outputs": {
    "ProxyURL": {
      "Description": "Kong Proxy URL",
      "Value": {
        "Fn::Join": [
          "",
          [
            "http:\/\/",
            {
              "Fn::GetAtt": [
                "KongLoadBalancer",
                "DNSName"
              ]
            },
            ":8000"
          ]
        ]
      }
    },
    "AdminURL": {
      "Description": "Kong Admin URL",
      "Value": {
        "Fn::Join": [
          "",
          [
            "http:\/\/",
            {
              "Fn::GetAtt": [
                "KongLoadBalancer",
                "DNSName"
              ]
            },
            ":8001"
          ]
        ]
      }
    }
  }
}
